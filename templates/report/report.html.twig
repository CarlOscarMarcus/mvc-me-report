{% extends "base.html.twig" %}

{% block title %}Index{% endblock %}

{% block body %}
    <div class="container-fluid kmomrep">
        <div class="row" id="kmom01">
            <h1> Kmom 01 </h1>
            <p>
                Min förkunskaper king objektorientering är att jag har jobbat
                med de 2 kmom förra året på denna kurs.
                Sedan har jag också jobbat med objektorientering på egna drivna projekt.
                <br><br>
                För att kunna komma igång med php behöver man kunna olika deklarationer och metoder
                för att den ska fungera. Först måste man göra en Klassdeklaration som är själva nämnet
                på klasses som gör att man kan kalla på den.
                Sedan behövs det egenskaper som bara kan nås inom klasses som är själva definationen
                av objektet ska innehålla. 
                Vid behöv kan man också implementera metoder, konstruktors och arv.
                Dessa används om man vill göra speciella händersler med objektet och dela data
                med subklasser.
                <br><br>
                Strukturen som användes till denna uppgift var att vi gjorde olika filer som läser varandra
                för att kunna fungera. 
                Templatesen körs av kontrollerna som har koll på vilken router.
                Just base.html.twig är grund templaten för hela hemsidan och den läses in av alla andra
                templates genom include som sedan lägger in sin egna infomation inom blocken som vi
                deffinerade inom base filen. Sedan har vi kontroller som håller till på routerna
                på hemsidan och den håller koll på vilken template som ska köras.
                <br><br>
                Jag fastande mycket på delnar Databases och Security i artiklen "PHP: The Right Way"
                Jag gjorde det för att jag tycker det är kul med databasen och något som jag inte
                har lärt mig än är särkerhet som är en stor del av utvecklningen på backend.
                Tycker det är också roligt att testa särkerhet av min gamla projekt för att se
                hur min vetenskap utvecklas.
                <br><br>
                I detta kmom har jag lärt mig mer om särkerhet främst hasing lösenord 
                genom att läsa igenom den sektionen på artiklen "PHP: The Right Way".
            </p>
        </div>
        <div class="row" id="kmom02">
            <h1> Kmom 02 </h1>
            <p> 
                Arv är en objektorienterad konstruktion som gör att en klass kan ärva egenskaper och metoder från en annan klass. 
                I PHP uppnås arv med nyckelordet "extends". Till exempel, om vi har en klass som heter "Animal" och vi vill skapa en underklass som heter "Dog", 
                kan vi använda arv för att ärva alla egenskaper och metoder för klassen "Animal".
                Komposition är en annan objektorienterad konstruktion som tillåter en klass att innehålla objekt från andra klasser som egenskaper. 
                I PHP uppnås sammansättning genom att skapa en instans av en annan klass inom klassen. Till exempel, om vi har en klass som heter "Bil" 
                och vi vill inkludera en instans av klassen "Engine", kan vi använda komposition för att skapa en instans av klassen "Motor" inom klassen "Bil".
                Interface är ett kontrakt som specificerar en uppsättning metoder som en klass måste implementera. 
                I PHP definieras gränssnitt med nyckelordet "Interface". Till exempel, om vi har ett gränssnitt som heter 
                "Shape" som anger en metod som heter "calculateArea", måste alla klasser som implementerar 
                "Shape"-gränssnittet implementera metoden "calculateArea".
                Trait är en mekanism för kodåteranvändning i PHP som gör att en utvecklare kan återanvända kod över 
                flera klasser utan att använda arv. Egenskaper definieras med nyckelordet "trait" och kan inkluderas i en klass med nyckelordet "use". 
                Till exempel, om vi har en egenskap som heter "Logger" som definierar en metod som kallas "log", kan vi inkludera "Logger"-egenskapen i flera klasser för att återanvända "log"-metoden.
                <br><br>
                Jag implementera uppgfiten genom en stor klass som heter Deck inom namespace App\DeckHandler som jag insåg så skulle vi göra tre klasses med någon typ av arv.
                Detta gör att uppgiften inte är helt klar. <strong> Jag kommer att fixa så min stora klass bli indelad till de önskade tre med någon typ av arv i nästa kmom. </strong>
                Så som jag löste uppgiften var jag nöjd över. Det ända som jag kan tänkta mig kan förbättras är dela upp min klass till övnskade tre som jag säkert kommer att förstå
                vid senare tillfälle varje det är bättre.
                <br><br>
                Jag tycker att det var lätt att skapa flödesdiagram och psuedokod. De hjälpte mig att tänka ut hur jag skulle göra det med också vad som behövdes implementeras
                för att få fram kort funktionerna.
                <br><br>
                Under detta kmom jag fått en refresher om hur klasses och arv fungerar.

            </p>
        </div>
        <div class="row" id="kmom03">
            <h1> Kmom 03 </h1>
            <p>
                
            </p>
        </div>
        <div class="row" id="kmom04">
            <h1> Kmom 04 </h1>
            <p> </p>
        </div>
        <div class="row" id="kmom05">
            <h1> Kmom 05 </h1>
            <p> </p>
        </div>
        <div class="row" id="kmom06">
            <h1> Kmom 06 </h1>
            <p> </p>
        </div>
        <div class="row" id="kmom07/10">
            <h1> Kmom 07/10 </h1>
            <p> </p>
        </div>
    </div>
{% endblock %}
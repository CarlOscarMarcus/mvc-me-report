{% extends "base.html.twig" %}

{% block title %}Index{% endblock %}

{% block body %}
    <div class="container-fluid kmomrep">
        <div class="row" id="kmom01">
            <h1> Kmom 01 </h1>
            <p>
                Min förkunskaper king objektorientering är att jag har jobbat
                med de 2 kmom förra året på denna kurs.
                Sedan har jag också jobbat med objektorientering på egna drivna projekt.
                <br><br>
                För att kunna komma igång med php behöver man kunna olika deklarationer och metoder
                för att den ska fungera. Först måste man göra en Klassdeklaration som är själva nämnet
                på klasses som gör att man kan kalla på den.
                Sedan behövs det egenskaper som bara kan nås inom klasses som är själva definationen
                av objektet ska innehålla. 
                Vid behöv kan man också implementera metoder, konstruktors och arv.
                Dessa används om man vill göra speciella händersler med objektet och dela data
                med subklasser.
                <br><br>
                Strukturen som användes till denna uppgift var att vi gjorde olika filer som läser varandra
                för att kunna fungera.
                Templatesen körs av kontrollerna som har koll på vilken router.
                Just base.html.twig är grund templaten för hela hemsidan och den läses in av alla andra
                templates genom include som sedan lägger in sin egna infomation inom blocken som vi
                deffinerade inom base filen. Sedan har vi kontroller som håller till på routerna
                på hemsidan och den håller koll på vilken template som ska köras.
                <br><br>
                Jag fastande mycket på delnar Databases och Security i artiklen "PHP: The Right Way"
                Jag gjorde det för att jag tycker det är kul med databasen och något som jag inte
                har lärt mig än är särkerhet som är en stor del av utvecklningen på backend.
                Tycker det är också roligt att testa särkerhet av min gamla projekt för att se
                hur min vetenskap utvecklas.
                <br><br>
                I detta kmom har jag lärt mig mer om särkerhet främst hasing lösenord 
                genom att läsa igenom den sektionen på artiklen "PHP: The Right Way".
            </p>
        </div>
        <div class="row" id="kmom02">
            <h1> Kmom 02 </h1>
            <p> 
                Arv är en objektorienterad konstruktion som gör att en klass kan ärva egenskaper och metoder från en annan klass. 
                I PHP uppnås arv med nyckelordet "extends". Till exempel, om vi har en klass som heter "Animal" och vi vill skapa en underklass som heter "Dog", 
                kan vi använda arv för att ärva alla egenskaper och metoder för klassen "Animal".
                Komposition är en annan objektorienterad konstruktion som tillåter en klass att innehålla objekt från andra klasser som egenskaper. 
                I PHP uppnås sammansättning genom att skapa en instans av en annan klass inom klassen. Till exempel, om vi har en klass som heter "Bil" 
                och vi vill inkludera en instans av klassen "Engine", kan vi använda komposition för att skapa en instans av klassen "Motor" inom klassen "Bil".
                Interface är ett kontrakt som specificerar en uppsättning metoder som en klass måste implementera. 
                I PHP definieras gränssnitt med nyckelordet "Interface". Till exempel, om vi har ett gränssnitt som heter 
                "Shape" som anger en metod som heter "calculateArea", måste alla klasser som implementerar 
                "Shape"-gränssnittet implementera metoden "calculateArea".
                Trait är en mekanism för kodåteranvändning i PHP som gör att en utvecklare kan återanvända kod över 
                flera klasser utan att använda arv. Egenskaper definieras med nyckelordet "trait" och kan inkluderas i en klass med nyckelordet "use". 
                Till exempel, om vi har en egenskap som heter "Logger" som definierar en metod som kallas "log", kan vi inkludera "Logger"-egenskapen i flera klasser för att återanvända "log"-metoden.
                <br><br>
                Jag implementera uppgfiten genom en stor klass som heter Deck inom namespace App\DeckHandler som jag insåg så skulle vi göra tre klasses med någon typ av arv.
                Detta gör att uppgiften inte är helt klar. <strong> Jag kommer att fixa så min stora klass bli indelad till de önskade tre med någon typ av arv i nästa kmom. </strong>
                Så som jag löste uppgiften var jag nöjd över. Det ända som jag kan tänkta mig kan förbättras är dela upp min klass till övnskade tre som jag säkert kommer att förstå
                vid senare tillfälle varje det är bättre.
                <br><br>
                Jag tycker att det var lätt att skapa flödesdiagram och psuedokod. De hjälpte mig att tänka ut hur jag skulle göra det med också vad som behövdes implementeras
                för att få fram kort funktionerna.
                <br><br>
                Under detta kmom jag fått en refresher om hur klasses och arv fungerar.

            </p>
        </div>
        <div class="row" id="kmom03">
            <h1> Kmom 03 </h1>
            <p>
                Att srkiva både ett flödesdiagram och psuedokod hjälper mycket att 
                komma in på rätt spår till lösningen. Det är också en bra sätt
                att få en bild framför sig som stödjer under utvecklningen.
                Mesta dels av flödesdiagram förklara också vad för funktioner
                som behövs genom varje if sats. <br><br>
                Jag är lite nöjd med min implementation i uppgiften dock kunde det varit bättre om jag skulle gjort mer implementering inom blackjack classes.
                Istället för att ha en hel del kod inom controller filen. Det som kunde förbättras inom min kod är just det med mer class implementationer
                men också mer fokusering av skriva fin kod. <br><br>
                Jag tycker att kodningen inom Symfony är bra än länge det tog bara några timmar av använing av ramverket för att lära sig grunderna.
                <br><br>
                Inom detta kmom har jag lärt mig vikten av att använda fler klasser för få syggare och läsbar kod.
            </p>
        </div>
        <div class="row" id="kmom04">
            <h1> Kmom 04 </h1>
            <p>
                Att skriva kod med phpunit är lätt och rent. Det ända jag kan klaga på är att jag behöver skriva @covers
                för varje function jag använda mig utav för att kodtäckning av phpunit. Som gjorde att det blev vädligt
                mycket kod för varje test function. Nästan att @covers tog fler rader än själva test funktionen.
                <br><br>
                Jag lyckades få kodtäckningen 99.12%. Det som jag inte testade var bara reserv return som var där
                vid utvecklningen av koden innan jag fick hela koden att fungera.
                <br><br>
                Det ända som jag inte lyckades att testa var min egna exception även om jag följde övningen så lyckades inte jag.
                Det var det ändra i koden som jag inte testade för har trots allt andra funktionalitet inom funktionen som tar hand
                om error.
                <br><br>
                Jag ändrade vissa få delar av min kod som var placeholders för implementationen av funktionerna innan
                andra ändrningar som gjorde av de returns aldrig kördes. Sen ändrade jag också koden så den blev lättare att läsa.
                <br><br>
                Nej det går inte att dra en slutsats att en kod som är testbar är snygg och ren kod. Utan det handlar bara om
                den fungerar som den ska och att den ger tillbaka förväntat värdet. Snygg och ren kod påvärkar inte resultatet
                av funktionen. Utan bara att det bli lättare att gå tillbaka och ändra funktionen och att andra att förstå
                koden lättare som inte har utvecklat den i grunden.
                <br><br>
                I detta kmom har jag lärt mig hur jag använder mig utav verktyg som hjälper mig att få mitt projekt mer läsbart.
                Genom phpdoc och att kunna testa min kod att den fungerar på alla olika sätt som kanske inte förkommer ofta inom
                vanliga användning av hemsidan.

            </p>
        </div>
        <div class="row" id="kmom05">
            <h1> Kmom 05 </h1>
            <p>
                Jag har inget att kommentera över övningen det var tydlig instruktion och Doctrine känns som ett enkelt men starkt verktyg.
                Jag hade inga problem med att få till Doctrine till mitt Symfony projekt var bara några delar som jag fick google fram lite svar
                som kom i efterhand. Som hur ändrar jag mina columns type efterhand man har skapat Entity. Sen fick jag ett problem
                som var att jag råkade skiva in fel typ av variabel som jag fastnade på som google kunde hjälpa till med.
                <br><br>
                När jag började implementera Doctrine till min applikation tänkte jag att försöka få det se liknande som andra delarna av projektet.
                Så det inte sticker ut så mycket jämnfört med de andra kursmomenten. Sen tycker jag om att arbeta med databaser som gjorde att
                jag hade en bra ide hur ska skulla strukturera upp databasen innan jag påbörjade skapa den efter mitt egna projekt.
                <br><br>
                Jag tycker att det var roligaa att jobba med ORM eftersom det är en ny teknika som jag inte har jobbat med innan som var till stor
                hjälp för att jag ville bara sätta mig in ner inom det. Jämnfört med andra databaser tekniken som använda vanligt vis genom
                en .sqlite fil med sql scripts var ORM mycket lättare att jobba med eftersom en stor del auto genererat som gjorde att arbets
                flödet gick snabbare.
                <br><br>
                Som jag uppfattar ORM så är ett en struktur hur databasen är uppbyggd på. Istället för att database är basserade helt på
                data insamlningar och tabeller så är ORM basserat på klasser och objekt. Som gör att datan hanteras på ett annat sätt där det kommer
                till ta emot och ändra värden inom databasen.
                <br><br>
                I detta kursmoment har jag lärt mig att använda mig av en ny teknik för databaser som klassas för ORM. Tekniken var intressast
                som värkte intresse för vidare läsning av hur tekniken fungerar och vart det kan implementeras på bästa sätt.
            </p>
        </div>
        <div class="row" id="kmom06">
            <h1> Kmom 06 </h1>
            <p>
                När det kommer till phpmetrics att använda så gillade jag verktyget.
                Just att man kan få en överblick på sin kodkvalite och vart i sitt repo som bör förbättras.
                Det var vädligt intressant att få någon direkt data som visar hur sitt repo set ut.
                Det som var mest uppskattat från phpmectrics är Maintainbility / complexity bilden på huvudsidan.
                Sedan tyckte jag om violations tabben som visar för potentionella buggar i sin kod. 
            </p>
            <p>
                Jag hade problem med att integrera scrutinizer så att den fungerade 100%. 
                Verktyget fungerade men mina nya testcases som jag skrev ville inte updateras. 
                Som gjorde att jag fick ändra och leta efter nya config kod som fungerar. 
                Min första bygge med verktyget var 9,89 poäng och 78% Coverage.
            </p>
            <p>
                När det kommer till kodkvalitet så är det svårt att se direkt kodkvaliteten. Men för mig under förbättringarna blev min kod mer läsbar
                och mindre komplex som kan vara ett tydligt indikation men behöver inte vara garaterat. När det kommer till badges så finns berättar dem lite om
                hur projektets kvalitet är men samtidigt så går det att manipulera svaret genom att ändra konfig filen. Som i mitt fall tog jag bort att
                scrutinizer skulle testa min /src/Controller/* för att unvika resultatet blir ändrat baserat på att controllerna är otestade och kanske
                har hög komplexitet. Så det är ett påstående om kvalitet på vad som testat och inte hela projektet. 
            </p>
            <p>
                I detta kom jag har fått lära mig hur ändrningar i komplexitet kan ändra många aspekter på sin kod från läsbarhet till att lättare kunna följa flödet
                av koden. Sedan också att test täckning är viktigt just att det är då man kan lättare hitta okända bugga i sin funktionalitet.
            </p>
        </div>
        <div class="row" id="kmom07/10">
            <h1> Kmom 07/10 </h1>
            <div>
                <h3> Krav  </h3>
                <ol>
                    <li>
                        Att börja med så skapade jag en ladningssida för /proj där jag har de följande länkarna som ligger under routen /proj som i detta fall är /about och /game.
                        Jag gjorde också en ny base template för /proj routerna enligt kravet. Jag gjorde det genom att skapa en ny fil som liknar base.html.twig. 
                        Som heter basegame.html.twig som tar hand om återupprepande styling element som i detta fallet var en navbar, footern och ändrad style schema.
                    </li>
                    <li>
                        Krav två så valde jag att vidareutveckla mitt blackjack spel från /game routen. Där jag skrev om mina klasses från början och implementerade fler funktioner som underlättade utvecklningen.
                        Grunden jag hade var bara blackjack med 1 hand mot banked och man kunde bara använda sig av hit och stand. 
                        Den vidareutvecklade /proj har flera funktioner som möjligheten att spela flera händer samtidigt som jag har bestämt att vara mellan 1 till 3 händer. 
                        Jag har också lagt till att man kan lägga in olika värden på sina händer så de olika händerna kan vara värda olika mycket. 
                        Sedan implementerade jag också möjligheten att köra double down och split baserat på de vanliga reglerna. 
                    </li>
                    <li>
                        Till det sista kravet jag implementerade var test täckning som jag avslutade på 100% kod täckning med undantaget att inte testa de olika kontrollerna.
                        Som använder sig av funktionalitet som är baserat på mina olika klasser. Jag jobbade också att jag fick 10/10 poäng på report enligt scrutinizer och att jag har inga issues.
                        Jag har också fixat till en README fil som förklarar hur man klonar repo:t och kör den lokalt tillsammans med lite kort om repo:t var till en kurs.
                    </li>
                </ol>
            </div>
            <div>
                Det gick bra att slutföra projektet allmänt men jag hade flera problem som tog lite längre tid och vissa saker som jag fick lämna som inte var riktigt optimerat.
                När det kommer till att hantera alla de olika varablerna som jag använde mig utav för proj gjorde det svårt att hänga med vad som händer och krävde flera support funktioner.
                Som hjälpte till att hantera de olika varablerna. Detta ledde till att min kod blev väldigt komplext. Om jag skulle haft mer tid på mig att slutföra projektet då skulle jag lägga ner mer
                tid på att dela upp funktionaliteten för att göra den mindre komplex både enligt phpmetrics men även visuellt för mig själv. Märkte om jag lämnade min kod för några timmar
                så var jag redan vilse i koden. Jag tycker att projektet har varit rimligt och roligt att göra just att man fick valmöjligheter på vad man kunde göra. 
                Men också att man behövde inte använda sig av externa material för att kunna slutföra denna kursen.
            </div>
            <div>
                Denna kursen har varit lärningrik och tycker att det har varit en bra kurs att läsa för att kunna förstå hur man programmerar objektorienterat och hur kraftfull klasser kan vara.
                Jag skulle säga att kurs materialet har varit bra och har täckt det som behövs för att klara av kursen. Handledningen har varit bra och det har funnits många möjligheter att få
                hjälp även om det finns många resurser idag som kan hjälpa en. För att kunna förbättra denna kursen skulle jag säga att kanske använda sig att något modernare ramverk t.ex. React, Angular etc.
                Annars har jag inte så mycket att säga skulle rekomendera denna kursen till vänner som vill lära sig mer om ramverk och om OOP. Jag ger betyget 7/10. 
            </div>
        </div>
    </div>
{% endblock %}
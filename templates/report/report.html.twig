{% extends "base.html.twig" %}

{% block title %}Index{% endblock %}

{% block body %}
    <div class="container-fluid kmomrep">
        <div class="row" id="kmom01">
            <h1> Kmom 01 </h1>
            <p>
                Min förkunskaper king objektorientering är att jag har jobbat
                med de 2 kmom förra året på denna kurs.
                Sedan har jag också jobbat med objektorientering på egna drivna projekt.
                <br><br>
                För att kunna komma igång med php behöver man kunna olika deklarationer och metoder
                för att den ska fungera. Först måste man göra en Klassdeklaration som är själva nämnet
                på klasses som gör att man kan kalla på den.
                Sedan behövs det egenskaper som bara kan nås inom klasses som är själva definationen
                av objektet ska innehålla. 
                Vid behöv kan man också implementera metoder, konstruktors och arv.
                Dessa används om man vill göra speciella händersler med objektet och dela data
                med subklasser.
                <br><br>
                Strukturen som användes till denna uppgift var att vi gjorde olika filer som läser varandra
                för att kunna fungera.
                Templatesen körs av kontrollerna som har koll på vilken router.
                Just base.html.twig är grund templaten för hela hemsidan och den läses in av alla andra
                templates genom include som sedan lägger in sin egna infomation inom blocken som vi
                deffinerade inom base filen. Sedan har vi kontroller som håller till på routerna
                på hemsidan och den håller koll på vilken template som ska köras.
                <br><br>
                Jag fastande mycket på delnar Databases och Security i artiklen "PHP: The Right Way"
                Jag gjorde det för att jag tycker det är kul med databasen och något som jag inte
                har lärt mig än är särkerhet som är en stor del av utvecklningen på backend.
                Tycker det är också roligt att testa särkerhet av min gamla projekt för att se
                hur min vetenskap utvecklas.
                <br><br>
                I detta kmom har jag lärt mig mer om särkerhet främst hasing lösenord 
                genom att läsa igenom den sektionen på artiklen "PHP: The Right Way".
            </p>
        </div>
        <div class="row" id="kmom02">
            <h1> Kmom 02 </h1>
            <p> 
                Arv är en objektorienterad konstruktion som gör att en klass kan ärva egenskaper och metoder från en annan klass. 
                I PHP uppnås arv med nyckelordet "extends". Till exempel, om vi har en klass som heter "Animal" och vi vill skapa en underklass som heter "Dog", 
                kan vi använda arv för att ärva alla egenskaper och metoder för klassen "Animal".
                Komposition är en annan objektorienterad konstruktion som tillåter en klass att innehålla objekt från andra klasser som egenskaper. 
                I PHP uppnås sammansättning genom att skapa en instans av en annan klass inom klassen. Till exempel, om vi har en klass som heter "Bil" 
                och vi vill inkludera en instans av klassen "Engine", kan vi använda komposition för att skapa en instans av klassen "Motor" inom klassen "Bil".
                Interface är ett kontrakt som specificerar en uppsättning metoder som en klass måste implementera. 
                I PHP definieras gränssnitt med nyckelordet "Interface". Till exempel, om vi har ett gränssnitt som heter 
                "Shape" som anger en metod som heter "calculateArea", måste alla klasser som implementerar 
                "Shape"-gränssnittet implementera metoden "calculateArea".
                Trait är en mekanism för kodåteranvändning i PHP som gör att en utvecklare kan återanvända kod över 
                flera klasser utan att använda arv. Egenskaper definieras med nyckelordet "trait" och kan inkluderas i en klass med nyckelordet "use". 
                Till exempel, om vi har en egenskap som heter "Logger" som definierar en metod som kallas "log", kan vi inkludera "Logger"-egenskapen i flera klasser för att återanvända "log"-metoden.
                <br><br>
                Jag implementera uppgfiten genom en stor klass som heter Deck inom namespace App\DeckHandler som jag insåg så skulle vi göra tre klasses med någon typ av arv.
                Detta gör att uppgiften inte är helt klar. <strong> Jag kommer att fixa så min stora klass bli indelad till de önskade tre med någon typ av arv i nästa kmom. </strong>
                Så som jag löste uppgiften var jag nöjd över. Det ända som jag kan tänkta mig kan förbättras är dela upp min klass till övnskade tre som jag säkert kommer att förstå
                vid senare tillfälle varje det är bättre.
                <br><br>
                Jag tycker att det var lätt att skapa flödesdiagram och psuedokod. De hjälpte mig att tänka ut hur jag skulle göra det med också vad som behövdes implementeras
                för att få fram kort funktionerna.
                <br><br>
                Under detta kmom jag fått en refresher om hur klasses och arv fungerar.

            </p>
        </div>
        <div class="row" id="kmom03">
            <h1> Kmom 03 </h1>
            <p>
                Att srkiva både ett flödesdiagram och psuedokod hjälper mycket att 
                komma in på rätt spår till lösningen. Det är också en bra sätt
                att få en bild framför sig som stödjer under utvecklningen.
                Mesta dels av flödesdiagram förklara också vad för funktioner
                som behövs genom varje if sats. <br><br>
                Jag är lite nöjd med min implementation i uppgiften dock kunde det varit bättre om jag skulle gjort mer implementering inom blackjack classes.
                Istället för att ha en hel del kod inom controller filen. Det som kunde förbättras inom min kod är just det med mer class implementationer
                men också mer fokusering av skriva fin kod. <br><br>
                Jag tycker att kodningen inom Symfony är bra än länge det tog bara några timmar av använing av ramverket för att lära sig grunderna.
                <br><br>
                Inom detta kmom har jag lärt mig vikten av att använda fler klasser för få syggare och läsbar kod.
            </p>
        </div>
        <div class="row" id="kmom04">
            <h1> Kmom 04 </h1>
            <p>
                Att skriva kod med phpunit är lätt och rent. Det ända jag kan klaga på är att jag behöver skriva @covers
                för varje function jag använda mig utav för att kodtäckning av phpunit. Som gjorde att det blev vädligt
                mycket kod för varje test function. Nästan att @covers tog fler rader än själva test funktionen.
                <br><br>
                Jag lyckades få kodtäckningen 99.12%. Det som jag inte testade var bara reserv return som var där
                vid utvecklningen av koden innan jag fick hela koden att fungera.
                <br><br>
                Det ända som jag inte lyckades att testa var min egna exception även om jag följde övningen så lyckades inte jag.
                Det var det ändra i koden som jag inte testade för har trots allt andra funktionalitet inom funktionen som tar hand
                om error.
                <br><br>
                Jag ändrade vissa få delar av min kod som var placeholders för implementationen av funktionerna innan
                andra ändrningar som gjorde av de returns aldrig kördes. Sen ändrade jag också koden så den blev lättare att läsa.
                <br><br>
                Nej det går inte att dra en slutsats att en kod som är testbar är snygg och ren kod. Utan det handlar bara om
                den fungerar som den ska och att den ger tillbaka förväntat värdet. Snygg och ren kod påvärkar inte resultatet
                av funktionen. Utan bara att det bli lättare att gå tillbaka och ändra funktionen och att andra att förstå
                koden lättare som inte har utvecklat den i grunden.
                <br><br>
                I detta kmom har jag lärt mig hur jag använder mig utav verktyg som hjälper mig att få mitt projekt mer läsbart.
                Genom phpdoc och att kunna testa min kod att den fungerar på alla olika sätt som kanske inte förkommer ofta inom
                vanliga användning av hemsidan.

            </p>
        </div>
        <div class="row" id="kmom05">
            <h1> Kmom 05 </h1>
            <p>
                Jag har inget att kommentera över övningen det var tydlig instruktion och Doctrine känns som ett enkelt men starkt verktyg.
                Jag hade inga problem med att få till Doctrine till mitt Symfony projekt var bara några delar som jag fick google fram lite svar
                som kom i efterhand. Som hur ändrar jag mina columns type efterhand man har skapat Entity. Sen fick jag ett problem
                som var att jag råkade skiva in fel typ av variabel som jag fastnade på som google kunde hjälpa till med.
                <br><br>
                När jag började implementera Doctrine till min applikation tänkte jag att försöka få det se liknande som andra delarna av projektet.
                Så det inte sticker ut så mycket jämnfört med de andra kursmomenten. Sen tycker jag om att arbeta med databaser som gjorde att
                jag hade en bra ide hur ska skulla strukturera upp databasen innan jag påbörjade skapa den efter mitt egna projekt.
                <br><br>
                Jag tycker att det var roligaa att jobba med ORM eftersom det är en ny teknika som jag inte har jobbat med innan som var till stor
                hjälp för att jag ville bara sätta mig in ner inom det. Jämnfört med andra databaser tekniken som använda vanligt vis genom
                en .sqlite fil med sql scripts var ORM mycket lättare att jobba med eftersom en stor del auto genererat som gjorde att arbets
                flödet gick snabbare.
                <br><br>
                Som jag uppfattar ORM så är ett en struktur hur databasen är uppbyggd på. Istället för att database är basserade helt på
                data insamlningar och tabeller så är ORM basserat på klasser och objekt. Som gör att datan hanteras på ett annat sätt där det kommer
                till ta emot och ändra värden inom databasen.
                <br><br>
                I detta kursmoment har jag lärt mig att använda mig av en ny teknik för databaser som klassas för ORM. Tekniken var intressast
                som värkte intresse för vidare läsning av hur tekniken fungerar och vart det kan implementeras på bästa sätt.
            </p>
        </div>
        <div class="row" id="kmom06">
            <h1> Kmom 06 </h1>
            <p> </p>
        </div>
        <div class="row" id="kmom07/10">
            <h1> Kmom 07/10 </h1>
            <p> </p>
        </div>
    </div>
{% endblock %}